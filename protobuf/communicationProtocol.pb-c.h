/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: communicationProtocol.proto */

#ifndef PROTOBUF_C_communicationProtocol_2eproto__INCLUDED
#define PROTOBUF_C_communicationProtocol_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Waypoint Waypoint;
typedef struct _Route Route;
typedef struct _DroneMessage DroneMessage;
typedef struct _DroneMessage__Position DroneMessage__Position;
typedef struct _DroneMessage__GpsVelocity DroneMessage__GpsVelocity;
typedef struct _DroneMessage__AirVelocity DroneMessage__AirVelocity;
typedef struct _DroneMessage__Altitude DroneMessage__Altitude;
typedef struct _DroneMessage__Attitude DroneMessage__Attitude;
typedef struct _DroneMessage__BaroData DroneMessage__BaroData;
typedef struct _DroneMessage__ThreeDimensionalData DroneMessage__ThreeDimensionalData;
typedef struct _DroneMessage__BatteryData DroneMessage__BatteryData;
typedef struct _DroneMessage__CommandSet DroneMessage__CommandSet;
typedef struct _DroneMessage__CommandUpdate DroneMessage__CommandUpdate;


/* --- enums --- */

typedef enum _DroneMessage__FlightMode {
  DRONE_MESSAGE__FLIGHT_MODE__m_off = 0,
  DRONE_MESSAGE__FLIGHT_MODE__m_degraded = 1,
  DRONE_MESSAGE__FLIGHT_MODE__m_passThrough = 2,
  DRONE_MESSAGE__FLIGHT_MODE__m_flybywire = 3,
  DRONE_MESSAGE__FLIGHT_MODE__m_autonomous_return_to_base = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DRONE_MESSAGE__FLIGHT_MODE)
} DroneMessage__FlightMode;

/* --- messages --- */

/*
 *Waypoints are used both to compose the route (which is a different message from the drone message since it never goes to the flight controller, only between planning system and flight management cimputer) and to update the home base waypoint on the 
 */
struct  _Waypoint
{
  ProtobufCMessage base;
  /*
   *Microseconds
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   *Degrees
   */
  float latitude;
  /*
   *Degrees
   */
  float longitude;
  /*
   *centimeters
   */
  int32_t altitude;
  /*
   *meters
   */
  protobuf_c_boolean has_orbit_radius;
  uint32_t orbit_radius;
  protobuf_c_boolean has_orbit_until_target_altitude;
  protobuf_c_boolean orbit_until_target_altitude;
  protobuf_c_boolean has_orbit_clockwise;
  protobuf_c_boolean orbit_clockwise;
};
#define WAYPOINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&waypoint__descriptor) \
    , 0,0, 0, 0, 0, 0,0, 0,0, 0,0 }


struct  _Route
{
  ProtobufCMessage base;
  char *comment;
  size_t n_route;
  Waypoint **route;
};
#define ROUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&route__descriptor) \
    , NULL, 0,NULL }


struct  _DroneMessage__Position
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   *degrees (signed)
   */
  float latitude;
  /*
   *degrees (signed)
   */
  float longitude;
  /*
   *centimeters ASL
   */
  protobuf_c_boolean has_gps_altitude;
  int32_t gps_altitude;
  /*
   *UTC time [hhmmss.sss]
   */
  protobuf_c_boolean has_real_time;
  float real_time;
  protobuf_c_boolean has_number_of_satellites;
  uint32_t number_of_satellites;
};
#define DRONE_MESSAGE__POSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__position__descriptor) \
    , 0,0, 0, 0, 0,0, 0,0, 0,0 }


struct  _DroneMessage__GpsVelocity
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  uint64_t timestamp;
  /*
   *cm/s
   */
  uint32_t speed;
  /*
   *64*degrees
   */
  uint32_t course_over_ground;
};
#define DRONE_MESSAGE__GPS_VELOCITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__gps_velocity__descriptor) \
    , 0, 0, 0 }


struct  _DroneMessage__AirVelocity
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   *cm/s
   */
  uint32_t speed;
};
#define DRONE_MESSAGE__AIR_VELOCITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__air_velocity__descriptor) \
    , 0,0, 0 }


struct  _DroneMessage__Altitude
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   *centimeters (relative to pressure calib)
   */
  int32_t altitude;
  /*
   *centimeters per second
   */
  protobuf_c_boolean has_rate_of_climb;
  int32_t rate_of_climb;
};
#define DRONE_MESSAGE__ALTITUDE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__altitude__descriptor) \
    , 0,0, 0, 0,0 }


struct  _DroneMessage__Attitude
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   *64*degrees
   */
  uint32_t course_magnetic;
  /*
   *64*degrees
   */
  int32_t pitch;
  /*
   *64*degrees
   */
  int32_t roll;
};
#define DRONE_MESSAGE__ATTITUDE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__attitude__descriptor) \
    , 0,0, 0, 0, 0 }


struct  _DroneMessage__BaroData
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  uint64_t timestamp;
  /*
   *Pa * 256
   */
  uint32_t pressure;
  /*
   *celsius * 100
   */
  int32_t temperature;
};
#define DRONE_MESSAGE__BARO_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__baro_data__descriptor) \
    , 0, 0, 0 }


struct  _DroneMessage__ThreeDimensionalData
{
  ProtobufCMessage base;
  uint64_t timestamp;
  float x;
  float y;
  float z;
};
#define DRONE_MESSAGE__THREE_DIMENSIONAL_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__three_dimensional_data__descriptor) \
    , 0, 0, 0, 0 }


struct  _DroneMessage__BatteryData
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   *mV
   */
  uint32_t voltage;
  /*
   *mA
   */
  uint32_t current;
};
#define DRONE_MESSAGE__BATTERY_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__battery_data__descriptor) \
    , 0,0, 0, 0 }


struct  _DroneMessage__CommandSet
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   *Realtive value, signed 8-bit integer
   */
  int32_t yaw;
  /*
   *Realtive value, signed 8-bit integer
   */
  int32_t pitch;
  /*
   *Realtive value, signed 8-bit integer
   */
  int32_t thrust;
};
#define DRONE_MESSAGE__COMMAND_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__command_set__descriptor) \
    , 0,0, 0, 0, 0 }


typedef enum {
  DRONE_MESSAGE__COMMAND_UPDATE__VERTICAL_COMMAND__NOT_SET = 0,
  DRONE_MESSAGE__COMMAND_UPDATE__VERTICAL_COMMAND_PITCH_ANGLE = 110,
  DRONE_MESSAGE__COMMAND_UPDATE__VERTICAL_COMMAND_ALTITUDE = 111,
  DRONE_MESSAGE__COMMAND_UPDATE__VERTICAL_COMMAND_RATE_OF_CLIMB = 112,
} DroneMessage__CommandUpdate__VerticalCommandCase;

typedef enum {
  DRONE_MESSAGE__COMMAND_UPDATE__HORIZONTAL_COMMAND__NOT_SET = 0,
  DRONE_MESSAGE__COMMAND_UPDATE__HORIZONTAL_COMMAND_HEADING = 113,
  DRONE_MESSAGE__COMMAND_UPDATE__HORIZONTAL_COMMAND_RATE_OF_TURN = 114,
} DroneMessage__CommandUpdate__HorizontalCommandCase;

typedef enum {
  DRONE_MESSAGE__COMMAND_UPDATE__SPEED_COMMAND__NOT_SET = 0,
  DRONE_MESSAGE__COMMAND_UPDATE__SPEED_COMMAND_THROTTLE = 115,
  DRONE_MESSAGE__COMMAND_UPDATE__SPEED_COMMAND_SPEED = 116,
} DroneMessage__CommandUpdate__SpeedCommandCase;

struct  _DroneMessage__CommandUpdate
{
  ProtobufCMessage base;
  /*
   *microseconds
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  DroneMessage__CommandUpdate__VerticalCommandCase vertical_command_case;
  union {
    /*
     *64*Degrees
     */
    int32_t pitch_angle;
    /*
     *centimeters
     */
    int32_t altitude;
    /*
     *centimeters/second
     */
    int32_t rate_of_climb;
  };
  DroneMessage__CommandUpdate__HorizontalCommandCase horizontal_command_case;
  union {
    /*
     *64*degrees
     */
    int32_t heading;
    /*
     *Relative value, signed 8-bit integer
     */
    int32_t rate_of_turn;
  };
  DroneMessage__CommandUpdate__SpeedCommandCase speed_command_case;
  union {
    /*
     *Relative value, UNsigned 8-bit integer
     */
    uint32_t throttle;
    /*
     *Centimeters/second
     */
    uint32_t speed;
  };
};
#define DRONE_MESSAGE__COMMAND_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__command_update__descriptor) \
    , 0,0, DRONE_MESSAGE__COMMAND_UPDATE__VERTICAL_COMMAND__NOT_SET, {0}, DRONE_MESSAGE__COMMAND_UPDATE__HORIZONTAL_COMMAND__NOT_SET, {0}, DRONE_MESSAGE__COMMAND_UPDATE__SPEED_COMMAND__NOT_SET, {0} }


struct  _DroneMessage
{
  ProtobufCMessage base;
  /*
   *First, we have a set of status messages that are only ever send
   * form the aircraft to the ground station
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   *Calculated status data
   */
  protobuf_c_boolean has_current_mode;
  DroneMessage__FlightMode current_mode;
  DroneMessage__GpsVelocity *current_groundspeed;
  DroneMessage__AirVelocity *current_airspeed;
  DroneMessage__Position *current_position;
  DroneMessage__Altitude *current_altitude;
  DroneMessage__Attitude *current_attitude;
  /*
   *Raw sensor data
   */
  DroneMessage__BaroData *static_pressure;
  DroneMessage__BaroData *pitot_pressure;
  DroneMessage__ThreeDimensionalData *gyro_raw;
  DroneMessage__ThreeDimensionalData *mag_raw;
  DroneMessage__ThreeDimensionalData *accel_raw;
  DroneMessage__BatteryData *current_battery_data;
  DroneMessage__CommandSet *output_command_set;
  /*
   *We also echo back our currently used CommandUpdate for debugging Ã¼urposes
   */
  DroneMessage__CommandUpdate *current_command;
  /*
   *Control messages
   */
  DroneMessage__CommandUpdate *input_command;
  /*
   *Configureation updates
   */
  protobuf_c_boolean has_sea_level_pressure;
  float sea_level_pressure;
  Waypoint *home_base;
  protobuf_c_boolean has_do_pressure_compensation;
  protobuf_c_boolean do_pressure_compensation;
};
#define DRONE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drone_message__descriptor) \
    , 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, NULL, 0,0 }


/* Waypoint methods */
void   waypoint__init
                     (Waypoint         *message);
size_t waypoint__get_packed_size
                     (const Waypoint   *message);
size_t waypoint__pack
                     (const Waypoint   *message,
                      uint8_t             *out);
size_t waypoint__pack_to_buffer
                     (const Waypoint   *message,
                      ProtobufCBuffer     *buffer);
Waypoint *
       waypoint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   waypoint__free_unpacked
                     (Waypoint *message,
                      ProtobufCAllocator *allocator);
/* Route methods */
void   route__init
                     (Route         *message);
size_t route__get_packed_size
                     (const Route   *message);
size_t route__pack
                     (const Route   *message,
                      uint8_t             *out);
size_t route__pack_to_buffer
                     (const Route   *message,
                      ProtobufCBuffer     *buffer);
Route *
       route__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   route__free_unpacked
                     (Route *message,
                      ProtobufCAllocator *allocator);
/* DroneMessage__Position methods */
void   drone_message__position__init
                     (DroneMessage__Position         *message);
/* DroneMessage__GpsVelocity methods */
void   drone_message__gps_velocity__init
                     (DroneMessage__GpsVelocity         *message);
/* DroneMessage__AirVelocity methods */
void   drone_message__air_velocity__init
                     (DroneMessage__AirVelocity         *message);
/* DroneMessage__Altitude methods */
void   drone_message__altitude__init
                     (DroneMessage__Altitude         *message);
/* DroneMessage__Attitude methods */
void   drone_message__attitude__init
                     (DroneMessage__Attitude         *message);
/* DroneMessage__BaroData methods */
void   drone_message__baro_data__init
                     (DroneMessage__BaroData         *message);
/* DroneMessage__ThreeDimensionalData methods */
void   drone_message__three_dimensional_data__init
                     (DroneMessage__ThreeDimensionalData         *message);
/* DroneMessage__BatteryData methods */
void   drone_message__battery_data__init
                     (DroneMessage__BatteryData         *message);
/* DroneMessage__CommandSet methods */
void   drone_message__command_set__init
                     (DroneMessage__CommandSet         *message);
/* DroneMessage__CommandUpdate methods */
void   drone_message__command_update__init
                     (DroneMessage__CommandUpdate         *message);
/* DroneMessage methods */
void   drone_message__init
                     (DroneMessage         *message);
size_t drone_message__get_packed_size
                     (const DroneMessage   *message);
size_t drone_message__pack
                     (const DroneMessage   *message,
                      uint8_t             *out);
size_t drone_message__pack_to_buffer
                     (const DroneMessage   *message,
                      ProtobufCBuffer     *buffer);
DroneMessage *
       drone_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   drone_message__free_unpacked
                     (DroneMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Waypoint_Closure)
                 (const Waypoint *message,
                  void *closure_data);
typedef void (*Route_Closure)
                 (const Route *message,
                  void *closure_data);
typedef void (*DroneMessage__Position_Closure)
                 (const DroneMessage__Position *message,
                  void *closure_data);
typedef void (*DroneMessage__GpsVelocity_Closure)
                 (const DroneMessage__GpsVelocity *message,
                  void *closure_data);
typedef void (*DroneMessage__AirVelocity_Closure)
                 (const DroneMessage__AirVelocity *message,
                  void *closure_data);
typedef void (*DroneMessage__Altitude_Closure)
                 (const DroneMessage__Altitude *message,
                  void *closure_data);
typedef void (*DroneMessage__Attitude_Closure)
                 (const DroneMessage__Attitude *message,
                  void *closure_data);
typedef void (*DroneMessage__BaroData_Closure)
                 (const DroneMessage__BaroData *message,
                  void *closure_data);
typedef void (*DroneMessage__ThreeDimensionalData_Closure)
                 (const DroneMessage__ThreeDimensionalData *message,
                  void *closure_data);
typedef void (*DroneMessage__BatteryData_Closure)
                 (const DroneMessage__BatteryData *message,
                  void *closure_data);
typedef void (*DroneMessage__CommandSet_Closure)
                 (const DroneMessage__CommandSet *message,
                  void *closure_data);
typedef void (*DroneMessage__CommandUpdate_Closure)
                 (const DroneMessage__CommandUpdate *message,
                  void *closure_data);
typedef void (*DroneMessage_Closure)
                 (const DroneMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor waypoint__descriptor;
extern const ProtobufCMessageDescriptor route__descriptor;
extern const ProtobufCMessageDescriptor drone_message__descriptor;
extern const ProtobufCMessageDescriptor drone_message__position__descriptor;
extern const ProtobufCMessageDescriptor drone_message__gps_velocity__descriptor;
extern const ProtobufCMessageDescriptor drone_message__air_velocity__descriptor;
extern const ProtobufCMessageDescriptor drone_message__altitude__descriptor;
extern const ProtobufCMessageDescriptor drone_message__attitude__descriptor;
extern const ProtobufCMessageDescriptor drone_message__baro_data__descriptor;
extern const ProtobufCMessageDescriptor drone_message__three_dimensional_data__descriptor;
extern const ProtobufCMessageDescriptor drone_message__battery_data__descriptor;
extern const ProtobufCMessageDescriptor drone_message__command_set__descriptor;
extern const ProtobufCMessageDescriptor drone_message__command_update__descriptor;
extern const ProtobufCEnumDescriptor    drone_message__flight_mode__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_communicationProtocol_2eproto__INCLUDED */
